name: Compare Branches

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: 'List of repositories to check (comma-separated)'
        required: true
        default: 'https://github.com/aakashdinkarh/portfolio-v1.git,https://github.com/aakashdinkarh/panda-img.git'

jobs:
  compare-branches:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check branch differences
        run: |
          # Function to compare branches
          compare_branches() {
            local repo=$1
            echo "Checking repository: $repo"
            
            # Create temporary directory for the repo
            TEMP_DIR=$(mktemp -d)
            cd $TEMP_DIR
            
            # Initialize git repo and add remote
            git init --quiet
            git remote add origin $repo
            
            # Fetch master and try both remote-build and gh-pages
            git fetch --quiet origin master:refs/remotes/origin/master 2>/dev/null
            git fetch --quiet origin remote-build:refs/remotes/origin/remote-build gh-pages:refs/remotes/origin/gh-pages 2>/dev/null
            
            # Determine which branch to compare against
            COMPARE_BRANCH=""
            if git rev-parse --verify origin/remote-build >/dev/null 2>&1; then
              COMPARE_BRANCH="remote-build"
            elif git rev-parse --verify origin/gh-pages >/dev/null 2>&1; then
              COMPARE_BRANCH="gh-pages"
            fi
            
            if [ -z "$COMPARE_BRANCH" ]; then
              echo "❌ Neither remote-build nor gh-pages branch found in $repo"
              cd ..
              rm -rf $TEMP_DIR
              return
            fi
            
            # Check if master has commits ahead of comparison branch
            AHEAD_COUNT=$(git rev-list --count origin/$COMPARE_BRANCH..origin/master 2>/dev/null)
            
            if [ "$AHEAD_COUNT" -gt "0" ]; then
              echo "⚠️ master is ahead of $COMPARE_BRANCH by $AHEAD_COUNT commit(s) in $repo"
              echo "$repo" >> $GITHUB_WORKSPACE/needs_update.txt
            else
              echo "✅ No changes to compare in $repo"
            fi
            
            cd ..
            rm -rf $TEMP_DIR
          }
          
          # Create workspace directory if it doesn't exist
          mkdir -p $GITHUB_WORKSPACE
          
          # Convert comma-separated input to array
          IFS=',' read -ra REPOS <<< "${{ github.event.inputs.repositories }}"
          
          # Check each repository
          for repo in "${REPOS[@]}"; do
            compare_branches "$repo"
            echo "-----------------------------------"
          done
          
          # Show summary of repositories needing updates
          if [ -f "$GITHUB_WORKSPACE/needs_update.txt" ]; then
            echo "📋 Summary of repositories needing updates:"
            cat "$GITHUB_WORKSPACE/needs_update.txt"
          else
            echo "✅ All repositories are in sync!"
          fi
